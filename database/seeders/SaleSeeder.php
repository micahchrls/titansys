<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Sale\Sale;
use App\Models\Sale\SaleItem;
use App\Models\Sale\SaleLog;
use App\Models\User;
use App\Models\Store\Store;
use App\Models\Inventory;
use App\Models\Product\Product;
use App\Models\Stock\StockMovement;
use App\Models\Stock\StockLog;
use Carbon\Carbon;
use Faker\Factory as Faker;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class SaleSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $faker = Faker::create();
        
        // Get available users, stores, and inventory items
        $users = User::all();
        $stores = Store::all();
        $inventories = Inventory::with('product')->where('quantity', '>', 0)->get();
        
        if ($users->isEmpty() || $stores->isEmpty() || $inventories->isEmpty()) {
            $this->command->info('Cannot create sales: missing users, stores, or inventory items.');
            return;
        }
        
        // Create 50 sales
        $this->command->info('Creating sales...');
        
        // Create sales over the last 90 days
        $startDate = Carbon::now()->subDays(90);
        $endDate = Carbon::now();
        
        $salesCreated = 0;
        
        for ($i = 0; $i < 100; $i++) { // Try up to 100 times to create 50 sales
            if ($salesCreated >= 50) {
                break; // Stop once we've created 50 sales
            }
            
            // Start a database transaction to ensure data consistency
            DB::beginTransaction();
            
            try {
                // Select a random store and user
                $store = $stores->random();
                $user = $users->random();
                
                // Generate a sale date within the last 90 days
                $saleDate = $faker->dateTimeBetween($startDate, $endDate);
                
                // Create the sale record - the sale_code will be auto-generated by the model's boot method
                $sale = new Sale([
                    'store_id' => $store->id,
                    'user_id' => $user->id,
                    'total_price' => 0, // Will calculate this based on items
                    'status' => 'completed', // Use the enum value instead of boolean
                ]);
                
                // Set timestamps manually
                $sale->created_at = $saleDate;
                $sale->updated_at = $saleDate;
                $sale->save();
                
                // Determine how many items to include in this sale (1-5)
                $itemCount = $faker->numberBetween(1, 5);
                
                // Get available inventory items for this store
                $availableInventory = $inventories->where('store_id', $store->id)
                                                 ->where('quantity', '>', 0);
                
                if ($availableInventory->isEmpty()) {
                    // Skip this sale if no inventory is available
                    DB::rollBack();
                    continue;
                }
                
                // Limit item count to available inventory
                $itemCount = min($itemCount, $availableInventory->count());
                
                // Select random inventory items
                $selectedInventory = $availableInventory->random($itemCount);
                
                $totalSalePrice = 0;
                
                // Create sale items
                foreach ($selectedInventory as $inventory) {
                    // Determine quantity to sell (1-3, but not more than available)
                    $quantity = min($faker->numberBetween(1, 3), $inventory->quantity);
                    
                    // Use the product price with a small random variation
                    $unitPrice = $inventory->product->price * $faker->randomFloat(2, 0.95, 1.05);
                    
                    // Create the sale item
                    $saleItem = new SaleItem([
                        'product_id' => $inventory->product_id,
                        'quantity' => $quantity,
                        'unit_price' => $unitPrice,
                    ]);
                    
                    // Set timestamps manually
                    $saleItem->created_at = $saleDate;
                    $saleItem->updated_at = $saleDate;
                    
                    $sale->items()->save($saleItem);
                    
                    // Update inventory (decrease quantity)
                    $inventory->quantity -= $quantity;
                    $inventory->save();
                    
                    // Record stock movement
                    StockMovement::create([
                        'inventory_id' => $inventory->id,
                        'quantity' => $quantity,
                        'movement_type' => 'out',
                        'created_at' => $saleDate,
                        'updated_at' => $saleDate,
                    ]);
                    
                    // Log the stock action
                    StockLog::create([
                        'user_id' => $user->id,
                        'store_id' => $store->id,
                        'inventory_id' => $inventory->id,
                        'action_type' => 'stock_out',
                        'description' => "Removed {$quantity} units from inventory due to sale transaction",
                        'created_at' => $saleDate,
                        'updated_at' => $saleDate,
                    ]);
                    
                    // Add to total sale price
                    $totalSalePrice += ($unitPrice * $quantity);
                }
                
                // Update the sale with the calculated total price
                $sale->total_price = $totalSalePrice;
                $sale->save();
                
                // Create sale log
                SaleLog::create([
                    'sale_id' => $sale->id,
                    'user_id' => $user->id,
                    'action_type' => 'create',
                    'description' => 'Sale created with ' . $selectedInventory->count() . ' items',
                    'created_at' => $saleDate,
                    'updated_at' => $saleDate,
                ]);
                
                // Commit the transaction
                DB::commit();
                
                // Increment counter
                $salesCreated++;
                
                // Update our collection of available inventory
                $inventories = Inventory::with('product')->where('quantity', '>', 0)->get();
                
                if ($salesCreated % 10 === 0) {
                    $this->command->info("Created {$salesCreated} sales...");
                }
            } catch (\Exception $e) {
                // If anything goes wrong, roll back the transaction
                DB::rollBack();
                $this->command->error("Error creating sale: {$e->getMessage()}");
            }
        }
        
        $this->command->info("Sales seeding completed successfully. Created {$salesCreated} sales.");
    }
}
